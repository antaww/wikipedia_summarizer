import torch
import torch.nn as nn
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
import re
import pickle


class SimpleRNN(nn.Module):
    def __init__(self, input_size: int, hidden_size: int, output_size: int, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Poids pour l'entr√©e 
        self.W_xh = nn.Linear(input_size, hidden_size)

        # Poids pour l'√©tat cach√© (r√©curence)
        self.W_hh = nn.Linear(hidden_size, hidden_size)

        # Biais
        self.b_h = nn.Parameter(torch.zeros(hidden_size))

        # Couche de sortie 
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x): 
        batch_size, seq_len, _ = x.size()
        h_t = torch.zeros(batch_size, self.hidden_size)

        for t in range(seq_len): 
            x_t = x[:, t, :]  # (batch_size, input_size)
            h_t = torch.tanh(self.W_xh(x_t) + self.W_hh(h_t) + self.b_h)  # Mise √† jour de l'√©tat cach√© Ht

        output = self.fc(h_t)  # (batch_size, output_size)
        return output


def preprocess_text(text):
    """Nettoie et pr√©processe le texte"""
    if isinstance(text, str):
        # Convertir en minuscules
        text = text.lower()
        # Supprimer les caract√®res sp√©ciaux
        text = re.sub(r'[^a-zA-Z\s]', '', text)
        # Supprimer les espaces multiples
        text = re.sub(r'\s+', ' ', text)
        return text.strip()
    return ""


def load_model_and_vectorizer():
    """Charge le mod√®le et recr√©√© le vectorizer"""
    print("Chargement du mod√®le et pr√©paration du vectorizer...")
    
    # Recharger les donn√©es pour recr√©er le vectorizer identique
    df = pd.read_csv('data/sentiment_data.csv')
    df = df.dropna()
    df['Comment'] = df['Comment'].apply(preprocess_text)
    df = df[df['Comment'].str.len() > 0]
    
    # Recr√©er le vectorizer avec les m√™mes param√®tres
    vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
    vectorizer.fit(df['Comment'])
    
    # Charger le mod√®le
    input_size = 1000
    hidden_size = 128
    output_size = 3
    
    model = SimpleRNN(input_size, hidden_size, output_size)
    model.load_state_dict(torch.load('rnn_sentiment_model.pth'))
    model.eval()
    
    return model, vectorizer


def predict_sentiment(model, vectorizer, text):
    """Pr√©dit le sentiment d'un texte"""
    # Pr√©processer le texte
    cleaned_text = preprocess_text(text)
    
    # Vectoriser
    text_vector = vectorizer.transform([cleaned_text]).toarray()
    text_tensor = torch.FloatTensor(text_vector).unsqueeze(1)
    
    # Pr√©diction
    with torch.no_grad():
        output = model(text_tensor)
        probabilities = torch.softmax(output, dim=1)
        predicted_class = torch.argmax(output, dim=1).item()
        confidence = probabilities[0][predicted_class].item()
    
    # Mapping des labels
    sentiment_labels = {0: 'N√©gatif', 1: 'Neutre', 2: 'Positif'}
    
    return {
        'sentiment': sentiment_labels[predicted_class],
        'confidence': confidence,
        'probabilities': {
            'N√©gatif': probabilities[0][0].item(),
            'Neutre': probabilities[0][1].item(),
            'Positif': probabilities[0][2].item()
        }
    }


def test_examples():
    """Teste le mod√®le sur quelques exemples"""
    print("=== CHARGEMENT DU MOD√àLE ===")
    model, vectorizer = load_model_and_vectorizer()
    
    print("\n=== TESTS SUR DES EXEMPLES ===")
    
    # Exemples de test
    test_texts = [
        "I love this product! It's amazing and works perfectly.",
        "This is terrible, I hate it so much. Worst purchase ever.",
        "It's okay, nothing special but not bad either.",
        "Apple Pay is so convenient and easy to use!",
        "The payment failed again, this is so frustrating.",
        "The app works fine, no complaints.",
        "Absolutely fantastic! Best app ever created!",
        "Doesn't work properly, very disappointed.",
        "It's average, could be better but could be worse"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n--- Test {i} ---")
        print(f"Texte: '{text}'")
        
        result = predict_sentiment(model, vectorizer, text)
        
        print(f"Pr√©diction: {result['sentiment']} (confiance: {result['confidence']:.3f})")
        print("Probabilit√©s:")
        for sentiment, prob in result['probabilities'].items():
            print(f"  {sentiment}: {prob:.3f}")


def interactive_test():
    """Mode interactif pour tester vos propres textes"""
    print("\n=== MODE INTERACTIF ===")
    print("Entrez vos textes pour tester le mod√®le (tapez 'quit' pour quitter)")
    
    model, vectorizer = load_model_and_vectorizer()
    
    while True:
        text = input("\nEntrez votre texte: ").strip()
        
        if text.lower() in ['quit', 'exit', 'q']:
            print("Au revoir!")
            break
            
        if not text:
            print("Veuillez entrer un texte valide.")
            continue
            
        result = predict_sentiment(model, vectorizer, text)
        
        print(f"\nüìä R√©sultat:")
        print(f"Sentiment: {result['sentiment']} (confiance: {result['confidence']:.3f})")
        print("D√©tail des probabilit√©s:")
        for sentiment, prob in result['probabilities'].items():
            bar = "‚ñà" * int(prob * 20)  # Barre de progression visuelle
            print(f"  {sentiment:8}: {prob:.3f} {bar}")


if __name__ == "__main__":
    try:
        # Tests automatiques
        test_examples()
        
        # Mode interactif
        interactive_test()
        
    except FileNotFoundError:
        print("‚ùå Erreur: Le mod√®le 'rnn_sentiment_model.pth' n'a pas √©t√© trouv√©.")
        print("Veuillez d'abord entra√Æner le mod√®le avec 'python test_rnn_torch.py'")
    except Exception as e:
        print(f"‚ùå Erreur: {e}") 