#!/usr/bin/env python3
"""
R√©sumeur d'articles Wikip√©dia utilisant des techniques NLP
Pipeline complet : preprocessing ‚Üí dataset ‚Üí entra√Ænement ‚Üí r√©sum√© avec mod√®le entra√Æn√©

Modes disponibles:
- build_dataset: Construction du dataset d'entra√Ænement
- train: Entra√Ænement du mod√®le Transformer
- summarize: R√©sum√© avec le mod√®le entra√Æn√© (diff√©rent du r√©sum√© Wikipedia pour dataset)
- interactive: Mode interactif de r√©sum√©
- demo: D√©monstration avec articles pr√©d√©finis
- visualize: Visualisation du preprocessing
- install_spacy: Installation des mod√®les spaCy
- evaluate: √âvaluation du mod√®le
"""

import argparse
import logging
import sys
from pathlib import Path

# Ajout du dossier src au path
sys.path.append('src')

from src.dataset_builder import DatasetBuilder
from src.text_preprocessor import TextPreprocessor
from src.config import Config

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def build_dataset_mode(args):
    """Mode construction du dataset"""
    logger.info(f"Construction du dataset avec {args.num_articles} articles en {args.lang}")
    
    config = Config()
    builder = DatasetBuilder(config)
    dataset_path = builder.build_dataset(
        num_articles=args.num_articles,
        language=args.lang
    )
    logger.info(f"Dataset cr√©√©: {dataset_path}")


def train_mode(args):
    """Mode entra√Ænement du mod√®le"""
    logger.info("Entra√Ænement du mod√®le de r√©sum√© Transformer")
    
    from src.train_summarization_model import train_summarization_model
    train_summarization_model()
    logger.info("Entra√Ænement termin√©")


def summarize_mode(args):
    """Mode r√©sum√© avec le mod√®le entra√Æn√©"""
    if not args.article:
        logger.error("Veuillez sp√©cifier un article avec --article")
        return
    
    logger.info(f"R√©sum√© de l'article avec le mod√®le entra√Æn√©: {args.article}")
    
    from src.wikipedia_summarizer_trained import WikipediaSummarizerTrained
    
    # Initialisation du r√©sumeur avec mod√®le entra√Æn√©
    summarizer = WikipediaSummarizerTrained()
    
    if summarizer.model is None:
        logger.error("Mod√®le entra√Æn√© non trouv√©. Veuillez d'abord entra√Æner le mod√®le avec --mode train")
        return
    
    try:
        # G√©n√©ration du r√©sum√© avec le mod√®le entra√Æn√©
        result = summarizer.summarize_article(
            args.article, 
            language=args.lang,
            max_length=args.max_length,
            min_length=args.min_length
        )
        
        if result:
            print(f"\n{'='*80}")
            print(f"üì∞ R√âSUM√â G√âN√âR√â PAR LE MOD√àLE ENTRA√éN√â")
            print(f"{'='*80}")
            print(f"üîó Article: {result['title']}")
            print(f"üåê URL: {result['url']}")
            print(f"üìè Longueur originale: {result['original_length']:,} caract√®res")
            print(f"üìè Longueur r√©sum√©: {result['summary_length']:,} caract√®res")
            print(f"üìâ Taux de compression: {result['compression_ratio']:.1%}")
            print(f"\nüìã R√©sum√© g√©n√©r√©:")
            print("-" * 60)
            print(result['summary'])
            print("-" * 60)
            print(f"{'='*80}")
        else:
            print("‚ùå Impossible de g√©n√©rer le r√©sum√©")
            
    except Exception as e:
        logger.error(f"Erreur lors du r√©sum√©: {e}")


def interactive_mode(args):
    """Mode interactif"""
    logger.info("Lancement du mode interactif")
    
    from src.wikipedia_summarizer_trained import interactive_mode
    interactive_mode()


def demo_mode(args):
    """Mode d√©monstration"""
    logger.info("Lancement de la d√©monstration")
    
    from src.wikipedia_summarizer_trained import demo_articles
    demo_articles()


def visualize_mode(args):
    """Mode visualisation du preprocessing"""
    logger.info("Lancement de la visualisation du preprocessing")
    
    from src.visualize_preprocessing import visualize_preprocessing
    visualize_preprocessing(args.article, args.lang)


def install_spacy_mode(args):
    """Mode installation des mod√®les spaCy"""
    logger.info("Installation des mod√®les spaCy")
    
    from src.install_spacy_models import install_spacy_models
    install_spacy_models()


def evaluate_mode(args):
    """Mode √©valuation du mod√®le"""
    logger.info("√âvaluation du mod√®le")
    
    from src.wikipedia_summarizer_trained import WikipediaSummarizerTrained
    
    summarizer = WikipediaSummarizerTrained()
    
    if summarizer.model is None:
        logger.error("Mod√®le entra√Æn√© non trouv√©. Veuillez d'abord entra√Æner le mod√®le.")
        return
    
    print(f"\n{'='*60}")
    print("üìä √âVALUATION DU MOD√àLE")
    print(f"{'='*60}")
    print("‚úÖ Mod√®le charg√© avec succ√®s")
    print(f"üñ•Ô∏è  Device: {summarizer.device}")
    print(f"üìÅ Chemin du mod√®le: {summarizer.model_path}")
    print(f"{'='*60}")


def main():
    """Point d'entr√©e principal du programme"""
    parser = argparse.ArgumentParser(
        description="R√©sumeur d'articles Wikip√©dia avec mod√®le Transformer entra√Æn√©",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  # 1. Installer les mod√®les spaCy
  python main.py --mode install_spacy
  
  # 2. Construire un dataset
  python main.py --mode build_dataset --num_articles 100 --lang fr
  
  # 3. Entra√Æner le mod√®le
  python main.py --mode train
  
  # 4. R√©sumer un article avec le mod√®le entra√Æn√©
  python main.py --mode summarize --article "Intelligence artificielle" --lang fr
  
  # 5. Mode interactif
  python main.py --mode interactive
  
  # 6. D√©monstration
  python main.py --mode demo
  
  # 7. Visualiser le preprocessing
  python main.py --mode visualize --article "Python (langage)"
        """
    )
    
    parser.add_argument(
        "--mode", 
        choices=[
            "build_dataset", "train", "summarize", "interactive", 
            "demo", "visualize", "install_spacy", "evaluate"
        ],
        default="interactive",
        help="Mode d'ex√©cution du programme"
    )
    
    parser.add_argument(
        "--article",
        type=str,
        help="Titre de l'article Wikipedia √† r√©sumer ou analyser"
    )
    
    parser.add_argument(
        "--num_articles",
        type=int,
        default=100,
        help="Nombre d'articles pour construire le dataset (mode build_dataset)"
    )
    
    parser.add_argument(
        "--lang",
        choices=["fr", "en"],
        default="fr",
        help="Langue des articles Wikipedia"
    )
    
    parser.add_argument(
        "--max_length",
        type=int,
        default=128,
        help="Longueur maximale du r√©sum√© g√©n√©r√©"
    )
    
    parser.add_argument(
        "--min_length",
        type=int,
        default=30,
        help="Longueur minimale du r√©sum√© g√©n√©r√©"
    )
    
    args = parser.parse_args()
    
    print("=" * 80)
    print("ü§ñ R√âSUMEUR D'ARTICLES WIKIPEDIA - PIPELINE NLP COMPLET")
    print("=" * 80)
    print(f"üîß Mode s√©lectionn√©: {args.mode}")
    print(f"üåç Langue: {args.lang}")
    if args.article:
        print(f"üìÑ Article: {args.article}")
    print("=" * 80)
    
    try:
        # Dispatch vers la fonction appropri√©e selon le mode
        if args.mode == "build_dataset":
            build_dataset_mode(args)
            
        elif args.mode == "train":
            train_mode(args)
            
        elif args.mode == "summarize":
            summarize_mode(args)
            
        elif args.mode == "interactive":
            interactive_mode(args)
            
        elif args.mode == "demo":
            demo_mode(args)
            
        elif args.mode == "visualize":
            visualize_mode(args)
            
        elif args.mode == "install_spacy":
            install_spacy_mode(args)
            
        elif args.mode == "evaluate":
            evaluate_mode(args)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Interruption utilisateur. Au revoir! üëã")
        
    except Exception as e:
        logger.error(f"Erreur: {e}")
        print(f"\n‚ùå Erreur: {e}")
        print("\nüí° Conseil: V√©rifiez les pr√©requis et que les mod√®les sont bien install√©s.")
        raise


if __name__ == "__main__":
    main() 