#!/usr/bin/env python3
"""
R√©sumeur d'articles Wikipedia utilisant le mod√®le entra√Æn√©
Combine wikipediaapi pour la r√©cup√©ration et le mod√®le transformers entra√Æn√© pour le r√©sum√©
"""

import torch
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import wikipediaapi
import os
import re
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class WikipediaSummarizer:
    """
    Classe pour r√©sumer des articles Wikipedia avec le mod√®le entra√Æn√©
    """
    
    def __init__(self, model_path="./models/summarization_wikipedia"):
        self.model_path = model_path
        self.model = None
        self.tokenizer = None
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.wiki = None
        self.load_model()
        self.setup_wikipedia_api()
    
    def load_model(self):
        """
        Charge le mod√®le et le tokenizer entra√Æn√©s
        """
        logger.info(f"Chargement du mod√®le depuis: {self.model_path}")
        
        if not os.path.exists(self.model_path):
            logger.error(f"Mod√®le non trouv√©: {self.model_path}")
            logger.info("Veuillez d'abord entra√Æner le mod√®le avec train_summarization_model.py")
            return False
        
        try:
            self.tokenizer = AutoTokenizer.from_pretrained(self.model_path)
            self.model = AutoModelForSeq2SeqLM.from_pretrained(self.model_path)
            self.model.to(self.device)
            self.model.eval()
            
            logger.info(f"‚úÖ Mod√®le charg√© sur: {self.device}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement: {e}")
            return False
    
    def setup_wikipedia_api(self):
        """
        Configure l'API Wikipedia
        """
        self.wiki = wikipediaapi.Wikipedia(
            user_agent='NLP-Trained-Summarizer/1.0 (Educational use)',
            language='fr'  # Par d√©faut en fran√ßais
        )
        logger.info("‚úÖ API Wikipedia configur√©e")
    
    def get_article(self, title, language='fr'):
        """
        R√©cup√®re un article Wikipedia
        """
        logger.info(f"R√©cup√©ration de l'article: {title} (langue: {language})")
        
        # Reconfigurer si n√©cessaire pour la langue
        if language != 'fr':
            self.wiki = wikipediaapi.Wikipedia(
                user_agent='NLP-Trained-Summarizer/1.0 (Educational use)',
                language=language
            )
        
        page = self.wiki.page(title)
        
        if not page.exists():
            logger.error(f"Article '{title}' non trouv√©")
            return None
        
        logger.info(f"‚úÖ Article r√©cup√©r√©: {len(page.text)} caract√®res")
        return {
            'title': page.title,
            'text': page.text,
            'url': page.fullurl,
            'length': len(page.text)
        }
    
    def preprocess_text(self, text):
        """
        Pr√©traite le texte pour le mod√®le
        """
        # Suppression des r√©f√©rences et nettoyage basique
        text = re.sub(r'\[[0-9]*\]', '', text)
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # Limitation de la longueur pour √©viter les probl√®mes de m√©moire
        max_chars = 4000  # Environ 512 tokens apr√®s tokenisation
        if len(text) > max_chars:
            text = text[:max_chars]
            logger.warning(f"Texte tronqu√© √† {max_chars} caract√®res")
        
        return text
    
    def generate_summary(self, text, max_length=128, min_length=30, num_beams=4):
        """
        G√©n√®re un r√©sum√© avec le mod√®le entra√Æn√©
        """
        if self.model is None or self.tokenizer is None:
            logger.error("Mod√®le non charg√©")
            return None
        
        logger.info("G√©n√©ration du r√©sum√© avec le mod√®le entra√Æn√©...")
        
        # Pr√©traitement
        text = self.preprocess_text(text)
        
        # Tokenisation
        inputs = self.tokenizer(
            text,
            max_length=512,
            padding='max_length',
            truncation=True,
            return_tensors='pt'
        ).to(self.device)
        
        # G√©n√©ration
        with torch.no_grad():
            summary_ids = self.model.generate(
                inputs['input_ids'],
                attention_mask=inputs['attention_mask'],
                max_length=max_length,
                min_length=min_length,
                num_beams=num_beams,
                early_stopping=True,
                no_repeat_ngram_size=2,
                do_sample=False,
                temperature=1.0,
                length_penalty=1.0
            )
        
        # D√©codage
        summary = self.tokenizer.decode(summary_ids[0], skip_special_tokens=True)
        
        return summary.strip()
    
    def summarize_article(self, title, language='fr', max_length=128, min_length=30):
        """
        R√©sume compl√®tement un article Wikipedia
        """
        # 1. R√©cup√©ration de l'article
        article = self.get_article(title, language)
        if not article:
            return None
        
        # 2. G√©n√©ration du r√©sum√©
        summary = self.generate_summary(
            article['text'], 
            max_length=max_length, 
            min_length=min_length
        )
        
        if not summary:
            return None
        
        # 3. Compilation des r√©sultats
        result = {
            'title': article['title'],
            'url': article['url'],
            'original_length': article['length'],
            'summary': summary,
            'summary_length': len(summary),
            'compression_ratio': len(summary) / article['length']
        }
        
        return result

def interactive_mode():
    """
    Mode interactif pour r√©sumer des articles
    """
    summarizer = WikipediaSummarizer()
    
    if summarizer.model is None:
        print("‚ùå Impossible de charger le mod√®le")
        return
    
    print("ü§ñ R√©sumeur d'articles Wikipedia avec mod√®le entra√Æn√©")
    print("Tapez 'quit' pour quitter\n")
    
    while True:
        title = input("üìù Titre de l'article Wikipedia: ").strip()
        
        if title.lower() in ['quit', 'exit', 'q']:
            print("Au revoir! üëã")
            break
        
        if not title:
            print("‚ö†Ô∏è Veuillez entrer un titre d'article")
            continue
        
        # Param√®tres optionnels
        language = input("üåç Langue (fr/en) [fr]: ").strip().lower()
        if language not in ['fr', 'en']:
            language = 'fr'
        
        try:
            max_len = input("üìè Longueur max du r√©sum√© [128]: ").strip()
            max_len = int(max_len) if max_len else 128
            
            min_len = input("üìè Longueur min du r√©sum√© [30]: ").strip()
            min_len = int(min_len) if min_len else 30
            
        except ValueError:
            print("‚ö†Ô∏è Param√®tres invalides, utilisation des valeurs par d√©faut")
            max_len, min_len = 128, 30
        
        print(f"\n{'='*80}")
        
        # G√©n√©ration du r√©sum√©
        try:
            result = summarizer.summarize_article(
                title, 
                language=language, 
                max_length=max_len, 
                min_length=min_len
            )
            
            if result:
                print(f"üì∞ Article: {result['title']}")
                print(f"üîó URL: {result['url']}")
                print(f"üìè Taille originale: {result['original_length']:,} caract√®res")
                print(f"üìè Taille r√©sum√©: {result['summary_length']:,} caract√®res")
                print(f"üìâ Taux de compression: {result['compression_ratio']:.1%}")
                print(f"\nüìã R√©sum√© g√©n√©r√© par le mod√®le:")
                print("-" * 60)
                print(result['summary'])
                print("-" * 60)
            else:
                print("‚ùå Impossible de g√©n√©rer le r√©sum√©")
                
        except Exception as e:
            logger.error(f"Erreur lors du r√©sum√©: {e}")
            print(f"‚ùå Erreur: {e}")
        
        print(f"\n{'='*80}\n")

def demo_articles():
    """
    D√©monstrateur avec quelques articles pr√©d√©finis
    """
    demo_titles = [
        "Intelligence artificielle",
        "R√©chauffement climatique", 
        "Python (langage)",
        "Machine learning",
        "R√©volution fran√ßaise"
    ]
    
    summarizer = WikipediaSummarizer()
    
    if summarizer.model is None:
        print("‚ùå Impossible de charger le mod√®le")
        return
    
    print("üöÄ D√©monstration avec des articles pr√©d√©finis\n")
    
    for title in demo_titles:
        print(f"{'='*80}")
        print(f"üì∞ Traitement: {title}")
        print(f"{'='*80}")
        
        try:
            result = summarizer.summarize_article(title, language='fr', max_length=100)
            
            if result:
                print(f"‚úÖ R√©sum√© g√©n√©r√© pour: {result['title']}")
                print(f"üìè {result['original_length']:,} ‚Üí {result['summary_length']:,} caract√®res ({result['compression_ratio']:.1%})")
                print(f"\nüìã R√©sum√©:")
                print("-" * 60)
                print(result['summary'])
                print("-" * 60)
            else:
                print(f"‚ùå √âchec pour: {title}")
                
        except Exception as e:
            print(f"‚ùå Erreur pour {title}: {e}")
        
        print("\n")

def main():
    """
    Fonction principale
    """
    print("=== R√©sumeur Wikipedia avec Mod√®le Entra√Æn√© ===\n")
    
    choice = input("""
Choisissez le mode:
1. Mode interactif
2. D√©monstration avec articles pr√©d√©finis
3. Les deux

Votre choix [1]: """).strip()
    
    if choice == "2":
        demo_articles()
    elif choice == "3":
        demo_articles()
        print("\n" + "="*80)
        print("Passage en mode interactif...")
        print("="*80 + "\n")
        interactive_mode()
    else:
        interactive_mode()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nInterruption utilisateur. Au revoir! üëã")
    except Exception as e:
        logger.error(f"Erreur inattendue: {e}")
        print(f"‚ùå Erreur inattendue: {e}") 